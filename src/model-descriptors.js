import {
  types as propTypes,
  comparePropertyToType,
  getTypeName,
  getPropertyTypeName
} from '@ngyv/prop-utils'

const TYPE_OPTIONS = Object.freeze([
  'required',
  'default',
  'acceptedTypes'
])

const TYPE_NAMES = Object.keys(propTypes)

/**
 * Takes in model descriptors and returns a flat object
 * @param  {string} typeName  String representation of prop types
 * @param  {boolean} required  Indicates validation
 * @param  {(number|boolean|string|array|object)} default  Fallback value
 * @return {object}
 */
const type = (typeName, options = {}) => {
  if (!TYPE_NAMES.includes(typeName)) {
    throw new TypeError(`Unexpected "${typeName}" passed as "typeName"`)
  }

  return Object.keys(options).reduce((hashType, optionKey) => {
    if (TYPE_OPTIONS.includes(optionKey)) {
      hashType[optionKey] = options[optionKey]
    }
    return hashType
  }, { type: propTypes[typeName] })
}

/**
 * Validates attribute with expected type if required is true
 * @param  {*} attribute  To be validated on
 * @param  {object} [type={}]  To be validated against and is generated by `type` function
 * @return {boolean}
 */
const validate = (attribute, type = {}) => {
  if (!type.type) { return }

  if (!comparePropertyToType(attribute, type.type, type.acceptedTypes)) {
    const message = `Expected "${getTypeName(type.type)}" but got property "${attribute}" of type "${getPropertyTypeName(attribute)}" instead`
    if (type.required) {
      throw new TypeError(message)
    } else {
      console.warn(message) // eslint-disable-line no-console
    }
    return false
  }
  return true
}

export {
  type,
  validate
}
